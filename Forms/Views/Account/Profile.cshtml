@model Forms.DataAccess.Entities.UserEntity
@{
    var theme = (string)ViewBag.Settings.Theme;
    var language = (string)ViewBag.Settings.Language;
    var context = (Forms.DataAccess.FormsDbContext)ViewBag.Context;
}

<!DOCTYPE html>
<html lang="@language">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-color: @(theme == "dark" ? "#121212" : "#ffffff");
            color: @(theme == "dark" ? "#ffffff" : "#000000");
        }


        .nav-button {
            border: none;
            background: none;
            font-size: 18px;
            padding: 10px 15px;
            position: relative;
            cursor: pointer;
            color: @(theme == "dark" ? "#ffffff" : "#000000");
        }

        .nav-container {
            position: relative;
            display: flex;
            gap: 15px;
        }
        .nav-indicator {
            position: absolute;
            bottom: 0;
            height: 2px;
            width: 0;
            background-color: #007bff;
            transition: transform 0.3s ease-in-out, width 0.3s ease-in-out;
        }

        .settings-container {
            position: absolute;
            top: 40px;
            right: 0;
            width: 200px;
            background: @(theme == "dark" ? "#1e1e1e" : "#ffffff");
            color: @(theme == "dark" ? "#ffffff" : "#000000");
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            padding: 10px;
            display: none;
            z-index: 1000;
        }

        .settings-icon {
            font-size: 24px;
            cursor: pointer;
            position: relative;
            color: @(theme == "dark" ? "#ffffff" : "#000000");
        }

        .content-container {
            margin-top: 20px;
            padding: 15px;
            background-color: @(theme == "dark" ? "#1e1e1e" : "#f8f9fa");
            border-radius: 8px;
            min-height: 300px;
        }

        .form-select, .btn {
            color: @(theme == "dark" ? "#ffffff" : "#000000");
            background-color: @(theme == "dark" ? "#333333" : "#ffffff");
            border: 1px solid @(theme == "dark" ? "#555555" : "#ced4da");
        }

        .btn-primary {
            background-color: @(theme == "dark" ? "#007bff" : "#007bff");
            border-color: @(theme == "dark" ? "#0056b3" : "#0056b3");
        }

        .btn-danger {
            background-color: @(theme == "dark" ? "#dc3545" : "#dc3545");
            border-color: @(theme == "dark" ? "#bd2130" : "#bd2130");
        }
    </style>
</head>
<body class="@(theme == "dark" ? "bg-dark text-light" : "bg-light text-dark")">
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center position-relative">
            <div class="nav-container">
                <button class="nav-button active" id="templates-tab" onclick="switchContent('templates')">@(language == "ru" ? "Шаблоны" : "Templates")</button>
                <button class="nav-button" id="forms-tab" onclick="switchContent('forms')">@(language == "ru" ? "Формы" : "Forms")</button>
                @if (Model.IsAdmin == 1)
                {
                    <button class="nav-button" id="users-tab" onclick="switchContent('users')">
                        <i class="bi bi-people"></i>
                    </button>
                }
                <button class="btn btn-success" onclick="window.location.href='/Template/Create'">@(language == "ru" ? "Добавить шаблон" : "Add Template")</button>
                <button class="btn btn-success" onclick="window.location.href='/Salesforce/CollectInformation'">@(language == "ru" ? "Подписаться на рассылку" : "Subscribe to the newsletter")</button>
                <div class="nav-indicator" id="indicator"></div>
            </div>
            <span class="settings-icon" onclick="toggleSettings()">
                <i class="bi bi-gear"></i>
            </span>
            <div class="settings-container" id="settingsMenu">
                <label>@(language == "ru" ? "Тема" : "Theme")</label>
                <select class="form-select mb-2">
                    @if(theme == "light")
                    {
                        <option value="light">@(language == "ru" ? "Светлая" : "Light")</option>
                        <option value="dark">@(language == "ru" ? "Темная" : "Dark")</option>
                    }
                    else
                    {
                        <option value="dark">@(language == "ru" ? "Темная" : "Dark")</option>
                        <option value="light">@(language == "ru" ? "Светлая" : "Light")</option>
                    }
                </select>
                <label>@(language == "ru" ? "Язык" : "Language")</label>
                <select class="form-select mb-2">
                    @if(language == "en")
                    {
                        <option value="en">English</option>
                        <option value="ru">Русский</option>
                    }
                    else
                    {
                        <option value="ru">Русский</option>
                        <option value="en">English</option>
                    }
                </select>
                <button class="btn btn-primary w-100 mb-2">@(language == "ru" ? "Сохранить" : "Save")</button>
                <a href="/Account/Quit" class="btn btn-danger w-100">@(language == "ru" ? "Выход" : "Logout")</a>
            </div>
        </div>
        @if(Model.IsAdmin == 0)
        {
            <div class="content-container mt-4" id="content">
                @await Html.PartialAsync("/Views/Template/ViewList.cshtml", Model.Templates.OrderByDescending(t => t.CreatedAt).ToList())
            </div>
        }
        else
        {
            <div class="content-container mt-4" id="content">
                @await Html.PartialAsync("/Views/Template/ViewList.cshtml", context.Templates.OrderByDescending(t => t.CreatedAt).ToList())
            </div>
        }
    </div>
    <script>
        const indicator = document.getElementById("indicator");

        function switchContent(type) {
            const contentContainer = document.getElementById("content");
            const activeButton = document.querySelector(".nav-button.active");
            const newActiveButton = document.getElementById(`${type}-tab`);

            activeButton.classList.remove("active");
            newActiveButton.classList.add("active");

            const buttonWidth = newActiveButton.offsetWidth;
            const buttonPosition = newActiveButton.offsetLeft;
            indicator.style.width = `${buttonWidth}px`;
            indicator.style.transform = `translateX(${buttonPosition}px)`;

            let searchUrl = '';
            if (type === 'templates') {
                searchUrl = `/Account/GetTemplates`;
            }
            else if (type == 'forms') {
                searchUrl = `/Account/GetForms`;
            }
            else{
                searchUrl = `/Account/GetUsers`;
            }

            fetch(searchUrl)
                .then(response => response.text())
                .then(html => {
                    contentContainer.innerHTML = html;
                    initScripts();
                });
        }

        function initScripts() {
        const script = document.createElement('script');
        script.innerHTML = `
            function toggleAll(source) {
                const checkboxes = document.querySelectorAll('.user-checkbox');
                checkboxes.forEach(cb => cb.checked = source.checked);
            }

            // Функция для изменения статуса пользователей
            async function changeUserStatus(action) {
                var selectedUserIds = [];
                document.querySelectorAll('input[name="userIds"]:checked').forEach(function (checkbox) {
                    selectedUserIds.push(checkbox.value);
                });

                if (selectedUserIds.length === 0) {
                    return;
                }

                let searchUrl = '';

                switch (action) {
                    case 'block':
                        searchUrl = '/Admin/Block?userIds=' + selectedUserIds;
                        break;
                    case 'unblock':
                        searchUrl = '/Admin/Unblock?userIds=' + selectedUserIds;
                        break;
                    case 'admin':
                        searchUrl = '/Admin/PromoteToAdmin?userIds=' + selectedUserIds;
                        break;
                    case 'removeAdmin':
                        searchUrl = '/Admin/LowerFromAdmin?userIds=' + selectedUserIds;
                        break;
                    case 'delete':
                        searchUrl = '/Admin/Remove?userIds=' + selectedUserIds;
                        break;
                }

                const response = await fetch(searchUrl);

                if (response.status === 200) {
                    location.reload();
                } else if (response.status === 403) {
                    window.location.href = "/Account/SignIn";
                } else {
                    alert('error');
                    return;
                }
            }
        `;
        document.body.appendChild(script);
    }


        window.onload = function () {
            const activeButton = document.querySelector(".nav-button.active");
            const buttonWidth = activeButton.offsetWidth;
            const buttonPosition = activeButton.offsetLeft;
            indicator.style.width = `${buttonWidth}px`;
            indicator.style.transform = `translateX(${buttonPosition}px)`;
        };

        function toggleSettings() {
            const settingsMenu = document.getElementById("settingsMenu");
            settingsMenu.style.display = settingsMenu.style.display === "block" ? "none" : "block";
        }

        document.addEventListener("click", function (event) {
            const settingsMenu = document.getElementById("settingsMenu");
            if (!event.target.closest(".settings-icon") && !event.target.closest(".settings-container")) {
                settingsMenu.style.display = "none";
            }
        });

        document.querySelector(".btn-primary").addEventListener("click", function () {
            const theme = document.querySelector(".form-select:nth-of-type(1)").value;
            const language = document.querySelector(".form-select:nth-of-type(2)").value;

            fetch(`/Account/SaveSettings?theme=${theme}&language=${language}`, {

                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ theme, language })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.isValid) {
                        location.reload();
                    } else {
                        alert(language === "ru" ? "Ошибка при сохранении настроек" : "Error saving settings");
                    }
                })
                .catch(() => {
                    alert(language === "ru" ? "Ошибка сети" : "Network error");
                });
        });

    </script>
</body>
</html>
